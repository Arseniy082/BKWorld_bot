import TelegramBot from "node-telegram-bot-api";
import axios from "axios";
import * as cheerio from "cheerio"; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const clanUrl = process.env.CLAN_URL;

if (!token || !clanUrl) {
  console.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –∏–ª–∏ CLAN_URL –≤ .env");
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ============================
// üéÆ –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏
// ============================
async function getOnlinePlayers() {
  try {
    const { data } = await axios.get(clanUrl);
    const $ = cheerio.load(data);
    const names = [];

    $("a[href^='/player/']").each((_, el) => {
      const name = $(el).text().trim();
      if (name && !/player list/i.test(name)) names.push(name);
    });

    return names;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤:", err.message);
    return null;
  }
}

// ============================
// ‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
// ============================
async function getPlayerStats(name) {
  try {
    const url = `https://ddnet.org/players/${encodeURIComponent(name)}/`;
    const { data } = await axios.get(url);
    const $ = cheerio.load(data);
    const stats = {};

    $("table.stats tr").each((_, el) => {
      const key = $(el).find("th").text().trim();
      const val = $(el).find("td").text().trim();
      if (key && val) stats[key] = val;
    });

    return stats;
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ${name}:`, err.message);
    return null;
  }
}

// ============================
// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞ (—á–µ—Ä–µ–∑ API teerank)
// ============================
async function getClanStatistics() {
  try {
    const { data } = await axios.get("https://api.teerank.io/clan/BKW");
    if (!data || !data.stats) return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞–Ω–∞.";

    const stats = data.stats;
    return (
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞ BKW:*\n\n` +
      `üèÜ –†–∞–Ω–≥: ${stats.rank}\n` +
      `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${stats.members}\n` +
      `üåç –°—Ç—Ä–∞–Ω–∞: ${stats.country}\n` +
      `üïπÔ∏è –û—á–∫–∏: ${stats.points}\n` +
      `üìà –¢–æ–ø-–∫–∞—Ä—Ç–∞: ${stats.top_map || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∞–Ω–∞:", err.message);
    return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞–Ω–∞.";
  }
}

// ============================
// üñ•Ô∏è –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ (—á–µ—Ä–µ–∑ API status.tw)
// ============================
async function getServerList() {
  try {
    const { data } = await axios.get("https://status.tw/api/server/list");
    if (!Array.isArray(data) || data.length === 0)
      return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤.";

    let message = "üñ•Ô∏è *–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:*\n\n";
    data.slice(0, 15).forEach((s) => {
      message += `üéÆ ${s.name}\nüó∫Ô∏è –ö–∞—Ä—Ç–∞: ${s.map}\nüë• –ò–≥—Ä–æ–∫–∏: ${s.clients}/${s.maxclients}\nüåç –°—Ç—Ä–∞–Ω–∞: ${s.country || "N/A"}\n\n`;
    });

    return message;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:", err.message);
    return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤.";
  }
}

// ============================
// ü§ñ –ö–æ–º–∞–Ω–¥—ã Telegram
// ============================
bot.onText(/\/start/, (msg) => {
  const options = {
    reply_markup: {
      keyboard: [
        ["üéÆ –û–Ω–ª–∞–π–Ω", "‚öîÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞", "üñ•Ô∏è –°–µ—Ä–≤–µ—Ä–∞"],
        ["üé® –°—Ç–∏–∫–µ—Ä—ã", "üè∑Ô∏è –ü—Ä–∏–ø–∏—Å–∫–∞", "üì¢ TGK"],
        ["üß∞ –°–∫–∏–Ω–ø–∞–∫"],
      ],
      resize_keyboard: true,
    },
  };

  bot.sendMessage(
    msg.chat.id,
    "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–ª–∞–Ω–∞ *BKWORLD*.\n\n" +
      "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá",
    { parse_mode: "Markdown", ...options }
  );
});

// ============================
// üéÆ –û–Ω–ª–∞–π–Ω
// ============================
bot.onText(/\/online|üéÆ –û–Ω–ª–∞–π–Ω/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é, –∫—Ç–æ –æ–Ω–ª–∞–π–Ω...");

  const names = await getOnlinePlayers();
  if (!names) return bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤.");
  if (names.length === 0) return bot.sendMessage(chatId, "üòï –ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –æ–Ω–ª–∞–π–Ω.");

  const text = names.map((n, i) => `${i + 1}. ${n}`).join("\n");
  bot.sendMessage(chatId, `üéÆ –°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω ${names.length} –∏–≥—Ä–æ–∫(–æ–≤):\n\n${text}`);
});

// ============================
// ‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
// ============================
bot.onText(/\/compare (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const args = match[1].split(" ").filter(Boolean);

  if (args.length !== 2)
    return bot.sendMessage(chatId, "‚öîÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /compare <–Ω–∏–∫1> <–Ω–∏–∫2>");

  const [p1, p2] = args;
  bot.sendMessage(chatId, `‚è≥ –°—Ä–∞–≤–Ω–∏–≤–∞—é ${p1} –∏ ${p2}...`);

  const [s1, s2] = await Promise.all([getPlayerStats(p1), getPlayerStats(p2)]);
  if (!s1 || !s2)
    return bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤.");

  let text = `‚öîÔ∏è *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:* ${p1} vs ${p2}\n\n`;
  const keys = Object.keys(s1).filter((k) => s2[k]);
  if (keys.length === 0) text += "‚ùå –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
  else {
    for (const key of keys) {
      text += `üè∑Ô∏è ${key}\n${p1}: ${s1[key]}\n${p2}: ${s2[key]}\n\n`;
    }
  }
  bot.sendMessage(chatId, text, { parse_mode: "Markdown" });
});

bot.onText(/‚öîÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤/, (msg) =>
  bot.sendMessage(
    msg.chat.id,
    "‚úçÔ∏è –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/compare –ù–∏–∫1 –ù–∏–∫2`",
    { parse_mode: "Markdown" }
  )
);

// ============================
// –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
// ============================
bot.onText(/\/tgk|üì¢ TGK/, (msg) =>
  bot.sendMessage(msg.chat.id, "üì¢ –ù–∞—à Telegram-–∫–∞–Ω–∞–ª: @BKWORLDCHANNEL")
);
bot.onText(/\/clantag|üè∑Ô∏è –ü—Ä–∏–ø–∏—Å–∫–∞/, (msg) =>
  bot.sendMessage(msg.chat.id, "üè∑Ô∏è –ü—Ä–∏–ø–∏—Å–∫–∞ –∫–ª–∞–Ω–∞: BKW")
);
bot.onText(/\/stickers|üé® –°—Ç–∏–∫–µ—Ä—ã/, (msg) =>
  bot.sendMessage(msg.chat.id, "üé® –°—Ç–∏–∫–µ—Ä—ã: https://t.me/addstickers/BKWORLDSTIK")
);

// ============================
// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
// ============================
bot.onText(/\/statistics|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞/, async (msg) => {
  bot.sendMessage(msg.chat.id, "üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞–Ω–∞...");
  const result = await getClanStatistics();
  bot.sendMessage(msg.chat.id, result, { parse_mode: "Markdown" });
});

// ============================
// üñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã
// ============================
bot.onText(/\/serverlist|üñ•Ô∏è –°–µ—Ä–≤–µ—Ä–∞/, async (msg) => {
  bot.sendMessage(msg.chat.id, "üñ•Ô∏è –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...");
  const result = await getServerList();
  bot.sendMessage(msg.chat.id, result, { parse_mode: "Markdown" });
});

// ============================
// üß∞ –°–∫–∏–Ω–ø–∞–∫
// ============================
bot.onText(/\/skinpack|üß∞ –°–∫–∏–Ω–ø–∞–∫/, async (msg) => {
  const chatId = msg.chat.id;

  const instruction = `üß∞ *Skin Pack by BKWORLD*  

üì¶ *–£—Å—Ç–∞–Ω–æ–≤–∫–∞:*
–†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Å–∫–∏–Ω –ø–∞–∫ –Ω—É–∂–Ω–æ –≤ –ø–∞–ø–∫—É:

ü™ü *Windows*  
\`C:\\Users\\–ò–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\AppData\\Roaming\\DDNet\\skins\`

üì± *Android*  
\`–¢–µ–ª–µ—Ñ–æ–Ω/Android/data/org.ddnet.client/files/user/skins\`
`;

  const photoPath = path.join(__dirname, "photo_2025-10-30_11-37-29.jpg");
  const zipPath = path.join(__dirname, "Skin pack by BKWORLD.zip");

  if (!fs.existsSync(photoPath) || !fs.existsSync(zipPath)) {
    return bot.sendMessage(chatId, "‚ö†Ô∏è –§–∞–π–ª—ã —Å–∫–∏–Ω–ø–∞–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
  }

  await bot.sendPhoto(chatId, photoPath, {
    caption: instruction,
    parse_mode: "Markdown",
  });

  await bot.sendDocument(chatId, zipPath, {
    caption: "üìÅ –°–∫–∏–Ω –ø–∞–∫ –¥–ª—è DDNet –æ—Ç –∫–ª–∞–Ω–∞ BKWORLD",
  });
});

console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã...");
